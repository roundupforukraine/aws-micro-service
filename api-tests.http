### Environment Variables
@baseUrl = http://localhost:3000
@adminApiKey = admin-key-1234567890abcdef
@invalidApiKey = invalid-key-123
@org1ApiKey = b1acc03624c016a7f5bfdf036d58dd95
@org1Id = 29d28de5-ed62-4789-a512-2329c525d420
@org2ApiKey = 878bd2e242e02f29d2c107c62c03bf52
@org2Id = 9c46ed17-bdcc-4e50-bbd5-d9ba4c26e5d7
@transaction1Id = 2683d37f-63bb-46ec-8f63-2d421bbf5194
@transaction2Id = 4090ce0c-42d8-409a-9fea-aacdb5637ad5

### Step 1: Register two organizations ###

### Register Organization 1
POST {{baseUrl}}/api/organizations/register
Content-Type: application/json
x-api-key: {{adminApiKey}}

{
    "name": "Organization 1"
}

### Register Organization 2
POST {{baseUrl}}/api/organizations/register
Content-Type: application/json
x-api-key: {{adminApiKey}}

{
    "name": "Organization 2"
}

### Step 2: Test error cases for organization registration ###

### Test with invalid API key
POST {{baseUrl}}/api/organizations/register
Content-Type: application/json
x-api-key: {{invalidApiKey}}

{
    "name": "Invalid Org"
}

### Test with non-admin API key
POST {{baseUrl}}/api/organizations/register
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "name": "Unauthorized Org"
}

### Test with missing required fields
POST {{baseUrl}}/api/organizations/register
Content-Type: application/json
x-api-key: {{adminApiKey}}

{}

### Step 3: Test organization details retrieval ###

### Get Organization 1 details with own API key
GET {{baseUrl}}/api/organizations/{{org1Id}}
x-api-key: {{org1ApiKey}}

### Get Organization 1 details with admin API key
GET {{baseUrl}}/api/organizations/{{org1Id}}
x-api-key: {{adminApiKey}}

### Get Organization 2 details with Organization 1's API key (should fail)
GET {{baseUrl}}/api/organizations/{{org2Id}}
x-api-key: {{org1ApiKey}}

### Get organization with invalid ID
GET {{baseUrl}}/api/organizations/invalid-id
x-api-key: {{adminApiKey}}

### Step 4: Test organization listing with pagination and search ###

### List organizations with pagination
GET {{baseUrl}}/api/organizations?page=1&limit=10
x-api-key: {{adminApiKey}}

### List organizations with search and sorting
GET {{baseUrl}}/api/organizations?search=Organization&sortBy=name&sortOrder=desc
x-api-key: {{adminApiKey}}

### List organizations with non-admin API key (should fail)
GET {{baseUrl}}/api/organizations
x-api-key: {{org1ApiKey}}

### Step 5: Create transactions for Organization 1 ###

### Create Transaction 1 for Organization 1
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "originalAmount": "23.83",
    "metadata": {
        "description": "Transaction 1 for Org 1"
    }
}

### Create Transaction 2 for Organization 1
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "originalAmount": "11.53",
    "metadata": {
        "description": "Transaction 2 for Org 1"
    }
}

### Create Transaction 3 for Organization 1
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "originalAmount": "32",
    "metadata": {
        "description": "Transaction 3 for Org 1"
    }
}

### Create Transaction 4 for Organization 1
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "originalAmount": "19.71",
    "metadata": {
        "description": "Transaction 4 for Org 1"
    }
}

### Create Transaction 5 for Organization 1
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "originalAmount": "40.18",
    "metadata": {
        "description": "Transaction 5 for Org 1"
    }
}

### Step 6: Create transactions for Organization 2 ###

### Create Transaction 1 for Organization 2
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "originalAmount": "14.08",
    "metadata": {
        "description": "Transaction 1 for Org 2"
    }
}

### Create Transaction 2 for Organization 2
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "originalAmount": "34.56",
    "metadata": {
        "description": "Transaction 2 for Org 2"
    }
}

### Create Transaction 3 for Organization 2
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "originalAmount": "22.26",
    "metadata": {
        "description": "Transaction 3 for Org 2"
    }
}

### Create Transaction 4 for Organization 2
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "originalAmount": "42.73",
    "metadata": {
        "description": "Transaction 4 for Org 2"
    }
}

### Create Transaction 5 for Organization 2
POST {{baseUrl}}/api/transactions
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "originalAmount": "30.44",
    "metadata": {
        "description": "Transaction 5 for Org 2"
    }
}

### Step 7: Test transaction details retrieval ###

### Get Transaction 1 details with Organization 1's API key
GET {{baseUrl}}/api/transactions/{{transaction1Id}}
x-api-key: {{org1ApiKey}}

### Get Transaction 1 details with admin API key
GET {{baseUrl}}/api/transactions/{{transaction1Id}}
x-api-key: {{adminApiKey}}

### Get Transaction 1 details with Organization 2's API key (should fail)
GET {{baseUrl}}/api/transactions/{{transaction1Id}}
x-api-key: {{org2ApiKey}}

### Get transaction with invalid ID
GET {{baseUrl}}/api/transactions/invalid-id
x-api-key: {{adminApiKey}}

### Step 8: Test transaction listing with pagination, sorting, and date filtering ###

### List transactions with pagination and sorting
GET {{baseUrl}}/api/transactions?page=1&limit=10&sortBy=originalAmount&sortOrder=desc
x-api-key: {{org1ApiKey}}

### List transactions with date filtering
GET {{baseUrl}}/api/transactions?startDate=2025-04-09T00:00:00Z&endDate=2025-04-09T23:59:59Z
x-api-key: {{org1ApiKey}}

### List transactions for Organization 2 with Organization 1's API key (should fail)
GET {{baseUrl}}/api/transactions?organizationId={{org2Id}}
x-api-key: {{org1ApiKey}}

### Step 9: Update organizations ###

### Update Organization 1
PUT {{baseUrl}}/api/organizations/{{org1Id}}
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "name": "Updated Organization 1",
    "description": "This organization has been updated"
}

### Update Organization 2
PUT {{baseUrl}}/api/organizations/{{org2Id}}
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "name": "Updated Organization 2",
    "description": "This organization has been updated"
}

### Update Organization 2 with Organization 1's API key (should fail)
PUT {{baseUrl}}/api/organizations/{{org2Id}}
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "name": "Unauthorized Update"
}

### Update organization with invalid ID
PUT {{baseUrl}}/api/organizations/invalid-id
Content-Type: application/json
x-api-key: {{adminApiKey}}

{
    "name": "Invalid Update"
}

### Step 10: Update transactions ###

### Update Transaction 1
PUT {{baseUrl}}/api/transactions/{{transaction1Id}}
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "metadata": {
        "description": "Updated Transaction 1 for Org 1",
        "updated": true
    }
}

### Update Transaction 2
PUT {{baseUrl}}/api/transactions/{{transaction2Id}}
Content-Type: application/json
x-api-key: {{org2ApiKey}}

{
    "metadata": {
        "description": "Updated Transaction 1 for Org 2",
        "updated": true
    }
}

### Update Transaction 2 with Organization 1's API key (should fail)
PUT {{baseUrl}}/api/transactions/{{transaction2Id}}
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "metadata": {
        "description": "Unauthorized Update"
    }
}

### Update transaction with invalid ID
PUT {{baseUrl}}/api/transactions/invalid-id
Content-Type: application/json
x-api-key: {{adminApiKey}}

{
    "metadata": {
        "description": "Invalid Update"
    }
}

### Step 11: Get transaction reports with date filtering ###

### Get transaction report with date filtering
GET {{baseUrl}}/api/transactions/report?startDate=2025-04-09T00:00:00Z&endDate=2025-04-09T23:59:59Z
x-api-key: {{org1ApiKey}}

### Get transaction report for Organization 1 with admin API key
GET {{baseUrl}}/api/transactions/report?organizationId={{org1Id}}
x-api-key: {{adminApiKey}}

### Get transaction report for Organization 2 with Organization 1's API key (should fail)
GET {{baseUrl}}/api/transactions/report?organizationId={{org2Id}}
x-api-key: {{org1ApiKey}}

### Step 12: Test cross-organization access ###

### Get Organization 2 details with Organization 1's API key (should fail)
GET {{baseUrl}}/api/organizations/{{org2Id}}
x-api-key: {{org1ApiKey}}

### Update Organization 2 with Organization 1's API key (should fail)
PUT {{baseUrl}}/api/organizations/{{org2Id}}
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "name": "Unauthorized Update"
}

### Get Transaction 2 details with Organization 1's API key (should fail)
GET {{baseUrl}}/api/transactions/{{transaction2Id}}
x-api-key: {{org1ApiKey}}

### Update Transaction 2 with Organization 1's API key (should fail)
PUT {{baseUrl}}/api/transactions/{{transaction2Id}}
Content-Type: application/json
x-api-key: {{org1ApiKey}}

{
    "metadata": {
        "description": "Unauthorized Update"
    }
}

### Step 13: Admin operations ###

### List all organizations with admin API key
GET {{baseUrl}}/api/organizations
x-api-key: {{adminApiKey}}

### List transactions for Organization 1 with admin API key
GET {{baseUrl}}/api/transactions?organizationId={{org1Id}}
x-api-key: {{adminApiKey}}

### Get transaction report for Organization 2 with admin API key
GET {{baseUrl}}/api/transactions/report?organizationId={{org2Id}}
x-api-key: {{adminApiKey}}

### Step 14: Cleanup ###

### Delete Organization 1
DELETE {{baseUrl}}/api/organizations/{{org1Id}}
x-api-key: {{adminApiKey}}

### Delete Organization 2
DELETE {{baseUrl}}/api/organizations/{{org2Id}}
x-api-key: {{adminApiKey}}

### Delete Transaction 1
DELETE {{baseUrl}}/api/transactions/{{transaction1Id}}
x-api-key: {{adminApiKey}}

### Delete Transaction 2
DELETE {{baseUrl}}/api/transactions/{{transaction2Id}}
x-api-key: {{adminApiKey}}

### Delete organization with invalid ID
DELETE {{baseUrl}}/api/organizations/invalid-id
x-api-key: {{adminApiKey}}

### Delete transaction with invalid ID
DELETE {{baseUrl}}/api/transactions/invalid-id
x-api-key: {{adminApiKey}}

### Delete Organization 1 with Organization 1's API key (should fail)
DELETE {{baseUrl}}/api/organizations/{{org1Id}}
x-api-key: {{org1ApiKey}}

### Delete Transaction 1 with Organization 1's API key (should fail)
DELETE {{baseUrl}}/api/transactions/{{transaction1Id}}
x-api-key: {{org1ApiKey}} 